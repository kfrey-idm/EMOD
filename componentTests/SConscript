import os

Import('env')

if env['AllDlls'] or ( 'DiseaseDll' in env and env[ 'DiseaseDll' ] !="" ):
    print("ERROR: component tests only supported in monolithic")
else:
    print( env["Disease"] )

    testsSrcFiles = [
        "AdditionalRestrictionsTest.cpp",
        "AdherentDrugTest.cpp",
        "AntimalarialDrugTest.cpp",
        "ARTMortalityTableTest.cpp",
        "AssortivityTest.cpp",
        "BaseEventReportTest.cpp",
        "BehaviorPfaTest.cpp",
        "CampaignEventByYearTest.cpp",
        "CommunityHealthWorkerEventCoordinatorTest.cpp",
        "componentTests.cpp",
        "ConcurrencyParametersTest.cpp",
        "ConfigureTest.cpp",
        "DelayedInterventionTest.cpp",
        "FakeLogger.cpp",
        "FileSystemTest.cpp",
        "FlowControllerImplTest.cpp",
        "GeneticProbabilityConfigTest.cpp",
        "GeneticProbabilityTest.cpp",
        "HIVARTStagingByCD4DiagnosticTest.cpp",
        "HIVARTStagingCD4AgnosticDiagnosticTest.cpp",
        "HIVDrawBloodTest.cpp",
        "HIVSimpleDiagnosticTest.cpp",
        "IncidenceEventCoordinatorTest.cpp",
        "InsecticidesTest.cpp",
        "InterpolatedValueMapTest.cpp",
        "InterventionForCurrentPartnersTest.cpp",
        "JsonObjectDemogTest.cpp",
        "LarvalHabitatMultiplierTest.cpp",
        "LoadBalanceSchemeTest.cpp",
        "MalariaDrugTypeParametersTest.cpp",
        "MathFunctionsTest.cpp",
        "MigrateIndividualsTest.cpp",
        "MigrationTest.cpp",
        "MosquitoReleaseTest.cpp",
        "NChooserEventCoordinatorTest.cpp",
        "NodeDemographicsTest.cpp",
        "NodePropertiesTest.cpp",
        "numpy-filesTest.cpp",
        "PairFormationParametersImplTest.cpp",
        "PairFormationStatsImplTest.cpp",
        "ParasiteGeneticsTest.cpp",
        "PrngTest.cpp",
        "ProgramOptionsTest.cpp",
        "PropertiesTest.cpp",
        "RandomNumberGeneratorFactoryTest.cpp",
        "RateTableImplTest.cpp",
        "RelationshipParametersTest.cpp",
        "ReportNodeDemographicsMalariaGeneticsTest.cpp",
        "ReportUtilitiesMalariaTest.cpp",
        "ReportUtilitiesTest.cpp",
        "SerializationParametersTest.cpp",
        "SerializationTest.cpp",
        "SerializedPopulationTest.cpp",
        "SigmoidTest.cpp",
        "STIIsPostDebutTest.cpp",
        "SugarTrapTest.cpp",
        "TestChiSquare.cpp",
        "TransmissionGroupsTest.cpp",
        "VectorCohortCollectionTest.cpp",
        "VectorCohortMaleTest.cpp",
        "VectorCohortTest.cpp",
        "VectorFertilizerTest.cpp",
        "VectorGameteTest.cpp",
        "VectorGeneDriverTest.cpp",
        "VectorGeneTest.cpp",
        "VectorGenomeTest.cpp",
        "VectorInterventionsContainerTest.cpp",
        "VectorMaternalDepositionTest.cpp",
        "VectorPopulationHelper.cpp",
        "VectorPopulationIndividualTest.cpp",
        "VectorPopulationTest.cpp",
        "VectorSpeciesParametersTest.cpp",
        "VectorTraitModifiersTest.cpp",
        "WaningEffectComboTest.cpp",
        "WaningEffectMapTest.cpp"
    ]


    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # !!! These linker flags are here so that they are not included with the DLLs.  !!!
    # !!! These are only for the EXE.                                               !!!
    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    erad_env = env.Clone()
    erad_env.Append( EXTRACPPPATH=["#/UnitTest++/src"])
    erad_env.Append( EXTRACPPPATH=["#/reporters"])
    erad_env.Append( LIBPATH=[ "$BUILD_DIR/UnitTest++" ] )
    erad_env.Append(LIBS=["unitTest"])

    if os.sys.platform == 'win32':
        erad_env.Append( LINKFLAGS=[ "/STACK:\"100000000,100000000\"" ] )
        erad_env.Append( LINKFLAGS=[ "/DELAYLOAD:\"python3.dll\""] )
        erad_env.Append( LIBS=["delayimp.lib"] )
        erad_env.Append(LIBPATH = ["$BUILD_DIR/Eradication"])
        erad_env.Append(LIBS=["/WHOLEARCHIVE:coreLib"])
        erad_env.Append(LIBS=["/WHOLEARCHIVE:reporters"])
    else:
        if env["Debug"]:
            erad_env.Append(LINKFLAGS=["-Wl,--whole-archive,build/x64/Debug/Eradication/libcoreLib.a,build/x64/Debug/reporters/libreporters.a,--no-whole-archive"])
        else:
            erad_env.Append(LINKFLAGS=["-Wl,--whole-archive,build/x64/Release/Eradication/libcoreLib.a,build/x64/Release/reporters/libreporters.a,--no-whole-archive"])

    # Monolithic
    testsExe = erad_env.Program('componentTests', testsSrcFiles)
    erad_env.Depends(testsExe, erad_env.Alias("CoreLibAlias") )
    erad_env.Depends(testsExe, erad_env.Alias("UnitTestAlias") )
